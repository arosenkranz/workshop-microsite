import { __assign } from "tslib";
import { monitor, addEventListener, Observable } from '@datadog/browser-core';
export function createLocationChangeObservable(location) {
    var currentLocation = __assign({}, location);
    var observable = new Observable(function () {
        var stopHistoryTracking = trackHistory(onLocationChange).stop;
        var stopHashTracking = trackHash(onLocationChange).stop;
        return function () {
            stopHistoryTracking();
            stopHashTracking();
        };
    });
    function onLocationChange() {
        if (currentLocation.href === location.href) {
            return;
        }
        var newLocation = __assign({}, location);
        observable.notify({
            newLocation: newLocation,
            oldLocation: currentLocation,
        });
        currentLocation = newLocation;
    }
    return observable;
}
function trackHistory(onHistoryChange) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    var originalPushState = history.pushState;
    history.pushState = monitor(function () {
        originalPushState.apply(this, arguments);
        onHistoryChange();
    });
    // eslint-disable-next-line @typescript-eslint/unbound-method
    var originalReplaceState = history.replaceState;
    history.replaceState = monitor(function () {
        originalReplaceState.apply(this, arguments);
        onHistoryChange();
    });
    var removeListener = addEventListener(window, "popstate" /* POP_STATE */, onHistoryChange).stop;
    var stop = function () {
        removeListener();
        history.pushState = originalPushState;
        history.replaceState = originalReplaceState;
    };
    return { stop: stop };
}
function trackHash(onHashChange) {
    return addEventListener(window, "hashchange" /* HASH_CHANGE */, onHashChange);
}
//# sourceMappingURL=locationChangeObservable.js.map