"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackActivity = exports.stopSessionManagement = exports.persistSession = exports.isValidSessionString = exports.startSessionManagement = exports.VISIBILITY_CHECK_DELAY = exports.SESSION_TIME_OUT_DELAY = exports.SESSION_EXPIRATION_DELAY = exports.SESSION_COOKIE_NAME = void 0;
var tslib_1 = require("tslib");
var cookie_1 = require("../browser/cookie");
var observable_1 = require("../tools/observable");
var utils = tslib_1.__importStar(require("../tools/utils"));
var timeUtils_1 = require("../tools/timeUtils");
var internalMonitoring_1 = require("./internalMonitoring");
var oldCookiesMigration_1 = require("./oldCookiesMigration");
exports.SESSION_COOKIE_NAME = '_dd_s';
exports.SESSION_EXPIRATION_DELAY = 15 * utils.ONE_MINUTE;
exports.SESSION_TIME_OUT_DELAY = 4 * utils.ONE_HOUR;
exports.VISIBILITY_CHECK_DELAY = utils.ONE_MINUTE;
/**
 * Limit access to cookie to avoid performance issues
 */
function startSessionManagement(options, productKey, computeSessionState) {
    var sessionCookie = cookie_1.cacheCookieAccess(exports.SESSION_COOKIE_NAME, options);
    oldCookiesMigration_1.tryOldCookiesMigration(sessionCookie);
    var renewObservable = new observable_1.Observable();
    var inMemorySession = retrieveActiveSession(sessionCookie);
    var expandOrRenewSession = utils.throttle(internalMonitoring_1.monitor(function () {
        sessionCookie.clearCache();
        var cookieSession = retrieveActiveSession(sessionCookie);
        var retrievedSession = tslib_1.__assign({}, cookieSession);
        var _a = computeSessionState(cookieSession[productKey]), trackingType = _a.trackingType, isTracked = _a.isTracked;
        cookieSession[productKey] = trackingType;
        if (isTracked && !cookieSession.id) {
            cookieSession.id = utils.generateUUID();
            cookieSession.created = String(Date.now());
        }
        // save changes and expand session duration
        persistSession(cookieSession, sessionCookie);
        // If the session id has changed, notify that the session has been renewed
        if (isTracked && inMemorySession.id !== cookieSession.id) {
            inMemorySession = tslib_1.__assign({}, cookieSession);
            renewObservable.notify();
        }
        if (isTracked && inMemorySession[productKey] !== undefined && inMemorySession[productKey] !== trackingType) {
            internalMonitoring_1.addMonitoringMessage('session type changed - eors', {
                debug: {
                    product: productKey,
                    inMemorySession: inMemorySession,
                    retrievedSession: retrievedSession,
                    newTrackingType: trackingType,
                    _dd_s: cookie_1.getCookie(exports.SESSION_COOKIE_NAME),
                },
            });
        }
        inMemorySession = tslib_1.__assign({}, cookieSession);
    }), cookie_1.COOKIE_ACCESS_DELAY).throttled;
    var expandSession = function () {
        sessionCookie.clearCache();
        var session = retrieveActiveSession(sessionCookie);
        persistSession(session, sessionCookie);
        if (session.id === inMemorySession.id && session[productKey] !== inMemorySession[productKey]) {
            internalMonitoring_1.addMonitoringMessage('session type changed - es', {
                debug: {
                    product: productKey,
                    inMemorySession: inMemorySession,
                    retrievedSession: session,
                    newTrackingType: session[productKey],
                    _dd_s: cookie_1.getCookie(exports.SESSION_COOKIE_NAME),
                },
            });
            inMemorySession = tslib_1.__assign({}, session);
        }
    };
    expandOrRenewSession();
    trackActivity(expandOrRenewSession);
    trackVisibility(expandSession);
    checkCookieConsistency();
    function checkCookieConsistency() {
        var alternateSessionCookie = cookie_1.cacheCookieAccess(exports.SESSION_COOKIE_NAME, options);
        var initTime = timeUtils_1.timeStampNow();
        setTimeout(function () {
            var sessionCookieCheck = retrieveActiveSession(alternateSessionCookie);
            alternateSessionCookie.clearCache();
            var checkDelay = timeUtils_1.timeStampNow() - initTime;
            if ((sessionCookieCheck.id !== inMemorySession.id ||
                sessionCookieCheck[productKey] !== inMemorySession[productKey]) &&
                checkDelay < cookie_1.COOKIE_ACCESS_DELAY) {
                internalMonitoring_1.addMonitoringMessage('cookie corrupted', {
                    debug: {
                        initTime: initTime,
                        checkDelay: checkDelay,
                        createdDelay: Number(sessionCookieCheck.created) - Number(inMemorySession.created),
                        expireDelay: Number(sessionCookieCheck.expire) - Number(inMemorySession.expire),
                        productKey: productKey,
                        sessionCookieCheck: sessionCookieCheck,
                        inMemorySession: inMemorySession,
                        _dd_s: cookie_1.getCookie(exports.SESSION_COOKIE_NAME),
                    },
                });
            }
        });
        var cookieConsistencyCheckInterval = setInterval(function () {
            var sessionCookieCheck = retrieveActiveSession(alternateSessionCookie);
            alternateSessionCookie.clearCache();
            if (inMemorySession.id === sessionCookieCheck.id &&
                inMemorySession[productKey] !== sessionCookieCheck[productKey]) {
                internalMonitoring_1.addMonitoringMessage('session type changed - ccc', {
                    debug: {
                        product: productKey,
                        inMemorySession: inMemorySession,
                        retrievedSession: sessionCookieCheck,
                        newTrackingType: sessionCookieCheck[productKey],
                        _dd_s: cookie_1.getCookie(exports.SESSION_COOKIE_NAME),
                    },
                });
                inMemorySession = tslib_1.__assign({}, sessionCookieCheck);
            }
        }, cookie_1.COOKIE_ACCESS_DELAY);
        stopCallbacks.push(function () { return clearInterval(cookieConsistencyCheckInterval); });
    }
    return {
        getId: function () { return retrieveActiveSession(sessionCookie).id; },
        getTrackingType: function () { return retrieveActiveSession(sessionCookie)[productKey]; },
        getInMemoryTrackingType: function () { return inMemorySession[productKey]; },
        renewObservable: renewObservable,
    };
}
exports.startSessionManagement = startSessionManagement;
var SESSION_ENTRY_REGEXP = /^([a-z]+)=([a-z0-9-]+)$/;
var SESSION_ENTRY_SEPARATOR = '&';
function isValidSessionString(sessionString) {
    return (sessionString !== undefined &&
        (sessionString.indexOf(SESSION_ENTRY_SEPARATOR) !== -1 || SESSION_ENTRY_REGEXP.test(sessionString)));
}
exports.isValidSessionString = isValidSessionString;
function retrieveActiveSession(sessionCookie) {
    var session = retrieveSession(sessionCookie);
    if (isActiveSession(session)) {
        return session;
    }
    clearSession(sessionCookie);
    return {};
}
function isActiveSession(session) {
    // created and expire can be undefined for versions which was not storing them
    // these checks could be removed when older versions will not be available/live anymore
    return ((session.created === undefined || Date.now() - Number(session.created) < exports.SESSION_TIME_OUT_DELAY) &&
        (session.expire === undefined || Date.now() < Number(session.expire)));
}
function retrieveSession(sessionCookie) {
    var sessionString = sessionCookie.get();
    var session = {};
    if (isValidSessionString(sessionString)) {
        sessionString.split(SESSION_ENTRY_SEPARATOR).forEach(function (entry) {
            var matches = SESSION_ENTRY_REGEXP.exec(entry);
            if (matches !== null) {
                var key = matches[1], value = matches[2];
                session[key] = value;
            }
        });
    }
    return session;
}
function persistSession(session, cookie) {
    if (utils.isEmptyObject(session)) {
        clearSession(cookie);
        return;
    }
    session.expire = String(Date.now() + exports.SESSION_EXPIRATION_DELAY);
    var cookieString = utils
        .objectEntries(session)
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return key + "=" + value;
    })
        .join(SESSION_ENTRY_SEPARATOR);
    cookie.set(cookieString, exports.SESSION_EXPIRATION_DELAY);
}
exports.persistSession = persistSession;
function clearSession(cookie) {
    cookie.set('', 0);
}
function stopSessionManagement() {
    stopCallbacks.forEach(function (e) { return e(); });
    stopCallbacks = [];
}
exports.stopSessionManagement = stopSessionManagement;
var stopCallbacks = [];
function trackActivity(expandOrRenewSession) {
    var stop = utils.addEventListeners(window, ["click" /* CLICK */, "touchstart" /* TOUCH_START */, "keydown" /* KEY_DOWN */, "scroll" /* SCROLL */], expandOrRenewSession, { capture: true, passive: true }).stop;
    stopCallbacks.push(stop);
}
exports.trackActivity = trackActivity;
function trackVisibility(expandSession) {
    var expandSessionWhenVisible = internalMonitoring_1.monitor(function () {
        if (document.visibilityState === 'visible') {
            expandSession();
        }
    });
    var stop = utils.addEventListener(document, "visibilitychange" /* VISIBILITY_CHANGE */, expandSessionWhenVisible).stop;
    stopCallbacks.push(stop);
    var visibilityCheckInterval = setInterval(expandSessionWhenVisible, exports.VISIBILITY_CHECK_DELAY);
    stopCallbacks.push(function () {
        clearInterval(visibilityCheckInterval);
    });
}
//# sourceMappingURL=sessionManagement.js.map