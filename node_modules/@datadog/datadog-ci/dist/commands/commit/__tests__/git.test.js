"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const git_1 = require("../git");
const createMockSimpleGit = (conf) => ({
    getRemotes: (_) => __awaiter(void 0, void 0, void 0, function* () {
        if (conf.remotes === undefined) {
            throw Error('Unexpected call to getRemotes');
        }
        return conf.remotes;
    }),
    raw: (command) => __awaiter(void 0, void 0, void 0, function* () {
        if (command === 'ls-files' && conf.trackedFiles !== undefined) {
            return conf.trackedFiles.join('\n') + '\n';
        }
        throw Error(`Unexpected call to raw(${command})`);
    }),
    revparse: (_) => __awaiter(void 0, void 0, void 0, function* () {
        if (conf.hash === undefined) {
            throw Error('Unexpected call to revparse');
        }
        return conf.hash;
    }),
});
describe('git', () => {
    describe('gitRemote', () => {
        test('should choose the remote named origin', () => __awaiter(void 0, void 0, void 0, function* () {
            const mock = createMockSimpleGit({
                remotes: [
                    { name: 'first', refs: { push: 'remote1' } },
                    { name: 'origin', refs: { push: 'remote2' } },
                ],
            });
            const remote = yield git_1.gitRemote(mock);
            expect(remote).toBe('remote2');
        }));
        test('should choose the first remote', () => __awaiter(void 0, void 0, void 0, function* () {
            const mock = createMockSimpleGit({
                remotes: [
                    { name: 'first', refs: { push: 'remote1' } },
                    { name: 'second', refs: { push: 'remote2' } },
                ],
            });
            const remote = yield git_1.gitRemote(mock);
            expect(remote).toBe('remote1');
        }));
    });
    describe('stripCredentials: git protocol', () => {
        test('should return the same value', () => {
            const input = 'git@github.com:user/project.git';
            expect(git_1.stripCredentials(input)).toBe(input);
        });
    });
    describe('stripCredentials: nothing to remove', () => {
        test('should return the same value', () => {
            const input = 'https://gitlab.com/user/project.git';
            expect(git_1.stripCredentials(input)).toBe(input);
        });
    });
    describe('stripCredentials: user:pwd', () => {
        test('should return without credentials', () => {
            const input = 'https://token:[MASKED]@gitlab.com/user/project.git';
            expect(git_1.stripCredentials(input)).toBe('https://gitlab.com/user/project.git');
        });
    });
    describe('stripCredentials: token', () => {
        test('should return without credentials', () => {
            const input = 'https://token@gitlab.com/user/project.git';
            expect(git_1.stripCredentials(input)).toBe('https://gitlab.com/user/project.git');
        });
    });
    describe('getCommitInfo', () => {
        test('should return commit info from simple git', () => __awaiter(void 0, void 0, void 0, function* () {
            const mock = createMockSimpleGit({
                hash: 'abcd',
                remotes: [{ name: 'first', refs: { push: 'https://git-repo' } }],
                trackedFiles: ['myfile.js'],
            });
            const commitInfo = yield git_1.getCommitInfo(mock, process.stdout);
            expect(commitInfo).toBeDefined();
            expect(commitInfo.hash).toBe('abcd');
            expect(commitInfo.trackedFiles).toStrictEqual(['myfile.js']);
            expect(commitInfo.remote).toBe('https://git-repo/');
        }));
        test('should return commit info with overridden repo name', () => __awaiter(void 0, void 0, void 0, function* () {
            const mock = createMockSimpleGit({
                hash: 'abcd',
                trackedFiles: ['myfile.js'],
            });
            const commitInfo = yield git_1.getCommitInfo(mock, process.stdout, 'https://overridden');
            expect(commitInfo).toBeDefined();
            expect(commitInfo.hash).toBe('abcd');
            expect(commitInfo.trackedFiles).toStrictEqual(['myfile.js']);
            expect(commitInfo.remote).toBe('https://overridden');
        }));
    });
});
