"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderSuccessfulCommand = exports.renderFailedUpload = exports.renderFailedUploadBecauseOf403 = exports.renderRetriedUpload = exports.renderUpload = exports.renderDryRunUpload = exports.renderCommandInfo = exports.renderCannotFindFile = exports.renderMissingReleaseVersionParameter = exports.renderUnsupportedParameterValue = exports.renderMissingEnvironmentVariable = exports.renderMissingParameter = exports.renderSupportedValues = void 0;
const chalk_1 = __importDefault(require("chalk"));
const renderSupportedValues = (supportedValues) => `Supported values are: ${chalk_1.default.bold(supportedValues.join('", "'))}`;
exports.renderSupportedValues = renderSupportedValues;
const renderMissingParameter = (parameter, supportedValues) => chalk_1.default.red(`Missing ${chalk_1.default.bold(parameter)} parameter.` +
    (supportedValues ? ` ${exports.renderSupportedValues(supportedValues)}\n` : '\n'));
exports.renderMissingParameter = renderMissingParameter;
const renderMissingEnvironmentVariable = (variable) => chalk_1.default.red(`Missing ${chalk_1.default.bold(variable)} in your environment.\n`);
exports.renderMissingEnvironmentVariable = renderMissingEnvironmentVariable;
const renderUnsupportedParameterValue = (parameter, value, supportedValues) => chalk_1.default.red(`Unsupported ${chalk_1.default.bold(parameter)} ${value}. ${exports.renderSupportedValues(supportedValues)}\n`);
exports.renderUnsupportedParameterValue = renderUnsupportedParameterValue;
const renderMissingReleaseVersionParameter = () => {
    const releaseVersion = chalk_1.default.bold('--release-version');
    return [
        chalk_1.default.yellow('┌──────────────────────────────────────────────────────────────────────────────────────┐'),
        chalk_1.default.yellow(`│ Missing optional ${releaseVersion} parameter.                                        │`),
        chalk_1.default.yellow('│ The analysis may use out of date dependencies and produce false positives/negatives. │'),
        chalk_1.default.yellow('└──────────────────────────────────────────────────────────────────────────────────────┘'),
        '',
    ].join('\n');
};
exports.renderMissingReleaseVersionParameter = renderMissingReleaseVersionParameter;
const renderCannotFindFile = (file) => chalk_1.default.red(`Cannot find "${file}" file.\n`);
exports.renderCannotFindFile = renderCannotFindFile;
const renderCommandInfo = (dependenciesFilePath, source, service, version, dryRun) => {
    const lines = [];
    if (dryRun) {
        lines.push(chalk_1.default.yellow('DRY-RUN MODE ENABLED. WILL NOT UPLOAD DEPENDENCIES.'));
    }
    lines.push(`${chalk_1.default.bold('File')}:    ${dependenciesFilePath}`);
    lines.push(`${chalk_1.default.bold('Source')}:  ${source}`);
    lines.push(`${chalk_1.default.bold('Service')}: ${service}`);
    if (version) {
        lines.push(`${chalk_1.default.bold('Version')}: ${version}`);
    }
    lines.push('');
    lines.push('');
    return lines.join('\n');
};
exports.renderCommandInfo = renderCommandInfo;
const renderDryRunUpload = () => `[DRYRUN] ${exports.renderUpload()}`;
exports.renderDryRunUpload = renderDryRunUpload;
const renderUpload = () => 'Uploading dependencies...\n';
exports.renderUpload = renderUpload;
const renderRetriedUpload = (errorMessage, attempt) => chalk_1.default.yellow(`[attempt ${attempt}] Retrying dependencies upload: ${errorMessage}\n`);
exports.renderRetriedUpload = renderRetriedUpload;
const renderFailedUploadBecauseOf403 = (errorMessage) => exports.renderFailedUpload(`${errorMessage}. Check ${chalk_1.default.bold('DATADOG_API_KEY')} and ${chalk_1.default.bold('DATADOG_APP_KEY')} environment variables.`);
exports.renderFailedUploadBecauseOf403 = renderFailedUploadBecauseOf403;
const renderFailedUpload = (errorMessage) => chalk_1.default.red(`Failed upload dependencies: ${errorMessage}\n`);
exports.renderFailedUpload = renderFailedUpload;
const renderSuccessfulCommand = (duration) => chalk_1.default.green(`Dependencies uploaded in ${duration} seconds.\n`);
exports.renderSuccessfulCommand = renderSuccessfulCommand;
