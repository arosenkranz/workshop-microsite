"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runUploadCommand = void 0;
const advanced_1 = require("clipanion/lib/advanced");
const upload_1 = require("../../upload");
const context_1 = require("./context");
const runUploadCommand = (filePath, input) => __awaiter(void 0, void 0, void 0, function* () {
    const cli = new advanced_1.Cli();
    cli.register(upload_1.UploadCommand);
    const context = context_1.createMockContext();
    process.env = {
        DATADOG_API_KEY: input.apiKey,
        DATADOG_APP_KEY: input.appKey,
    };
    const params = ['dependencies', 'upload', filePath];
    if (input.releaseVersion) {
        params.push('--release-version', input.releaseVersion);
    }
    if (input.service) {
        params.push('--service', input.service);
    }
    if (input.source) {
        params.push('--source', input.source);
    }
    if (input.dryRun) {
        params.push('--dry-run');
    }
    const code = yield cli.run(params, context);
    return { context, code };
});
exports.runUploadCommand = runUploadCommand;
