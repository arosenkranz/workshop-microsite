"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const stream_1 = require("./helpers/stream");
const upload_run_1 = require("./helpers/upload.run");
describe('execute', () => {
    // Disable chalk colors before tests
    let previousLevel;
    beforeAll(() => {
        previousLevel = chalk_1.default.level;
        chalk_1.default.level = 0;
    });
    // Restore chalk colors after tests
    afterAll(() => {
        chalk_1.default.level = previousLevel;
    });
    test('runs with --dry-run parameter', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = './src/commands/dependencies/__tests__/fixtures/dependencies.json';
        const resolvedFilePath = path_1.default.resolve(filePath);
        const { context, code } = yield upload_run_1.runUploadCommand(filePath, {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            dryRun: true,
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toEqual('');
        expect(stdout).toContain('DRY-RUN MODE ENABLED. WILL NOT UPLOAD DEPENDENCIES.');
        expect(stdout).toMatch(new RegExp(`File:[\\s]+${resolvedFilePath}`));
        expect(stdout).toMatch(/Source:[\s]+snyk/);
        expect(stdout).toMatch(/Service:[\s]+my-service/);
        expect(stdout).toMatch(/Version:[\s]+1.234/);
        expect(stdout).toContain('[DRYRUN] Uploading dependencies...');
        expect(stdout).toMatch(/Dependencies uploaded in .* seconds\./);
        expect(code).toBe(0);
    }));
    test('exits if missing api key', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield upload_run_1.runUploadCommand('./src/commands/dependencies/__tests__/fixtures/dependencies.json', {
            appKey: 'DD_APP_KEY_EXAMPLE',
            dryRun: true,
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toContain('Missing DATADOG_API_KEY in your environment.');
        expect(stdout).toEqual('');
        expect(code).toBe(1);
    }));
    test('exits if missing app key', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield upload_run_1.runUploadCommand('./src/commands/dependencies/__tests__/fixtures/dependencies.json', {
            apiKey: 'DD_API_KEY_EXAMPLE',
            dryRun: true,
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toContain('Missing DATADOG_APP_KEY in your environment.');
        expect(stdout).toEqual('');
        expect(code).toBe(1);
    }));
    test('exits if missing --service parameter', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield upload_run_1.runUploadCommand('./src/commands/dependencies/__tests__/fixtures/dependencies.json', {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            dryRun: true,
            releaseVersion: '1.234',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toContain('Missing --service parameter.');
        expect(stdout).toEqual('');
        expect(code).toBe(1);
    }));
    test('exits if missing --source parameter', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield upload_run_1.runUploadCommand('./src/commands/dependencies/__tests__/fixtures/dependencies.json', {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            dryRun: true,
            releaseVersion: '1.234',
            service: 'my-service',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toContain('Missing --source parameter. Supported values are: snyk');
        expect(stdout).toEqual('');
        expect(code).toBe(1);
    }));
    test('exits if invalid --source parameter', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield upload_run_1.runUploadCommand('./src/commands/dependencies/__tests__/fixtures/dependencies.json', {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            dryRun: true,
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'unknown-source',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toContain('Unsupported --source unknown-source. Supported values are: snyk');
        expect(stdout).toEqual('');
        expect(code).toBe(1);
    }));
    test("exits if file doesn't exist", () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = './src/commands/dependencies/__tests__/fixtures/unknown-dependencies';
        const resolvedFilePath = path_1.default.resolve(filePath);
        const { context, code } = yield upload_run_1.runUploadCommand(filePath, {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            dryRun: true,
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toContain(`Cannot find "${resolvedFilePath}" file.`);
        expect(stdout).toEqual('');
        expect(code).toBe(2);
    }));
    test('shows warning if missing --release-version parameter', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield upload_run_1.runUploadCommand('./src/commands/dependencies/__tests__/fixtures/dependencies.json', {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            dryRun: true,
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toEqual('');
        expect(stdout).toContain('Missing optional --release-version parameter.');
        expect(stdout).toContain('The analysis may use out of date dependencies and produce false positives/negatives.');
        expect(code).toBe(0);
    }));
    test('makes a valid API request', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = './src/commands/dependencies/__tests__/fixtures/dependencies.json';
        const resolvedFilePath = path_1.default.resolve(filePath);
        const { context, code } = yield upload_run_1.runUploadCommand(filePath, {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toEqual('');
        expect(stdout).toMatch(new RegExp(`File:[\\s]+${resolvedFilePath}`));
        expect(stdout).toMatch(/Source:[\s]+snyk/);
        expect(stdout).toMatch(/Service:[\s]+my-service/);
        expect(stdout).toMatch(/Version:[\s]+1.234/);
        expect(stdout).toContain('Uploading dependencies...');
        expect(stdout).toMatch(/Dependencies uploaded in .* seconds\./);
        expect(code).toBe(0);
        expect(axios_1.default.post).toHaveBeenCalledWith('https://api.datadoghq.com/profiling/api/v1/dep-graphs', expect.anything(), {
            headers: {
                'DD-API-KEY': 'DD_API_KEY_EXAMPLE',
                'DD-APPLICATION-KEY': 'DD_APP_KEY_EXAMPLE',
                'content-type': expect.stringContaining('multipart/form-data'),
            },
        });
        const formData = axios_1.default.post.mock.calls[0][1];
        expect(formData).toBeDefined();
        // Read stream and normalize EOL
        const formPayload = (yield stream_1.streamToString(formData)).replace(/\r\n|\r|\n/g, '\n');
        const dependenciesContent = fs_1.default.readFileSync('./src/commands/dependencies/__tests__/fixtures/dependencies.json');
        expect(dependenciesContent).not.toBeFalsy();
        expect(formPayload).toContain(['Content-Disposition: form-data; name="service"', '', 'my-service'].join('\n'));
        expect(formPayload).toContain(['Content-Disposition: form-data; name="version"', '', '1.234'].join('\n'));
        expect(formPayload).toContain(['Content-Disposition: form-data; name="source"', '', 'snyk'].join('\n'));
        expect(formPayload).toContain([
            'Content-Disposition: form-data; name="file"; filename="dependencies.json"',
            'Content-Type: application/json',
            '',
            dependenciesContent,
        ].join('\n'));
    }));
    test('handles API errors', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = './src/commands/dependencies/__tests__/fixtures/dependencies.json';
        const resolvedFilePath = path_1.default.resolve(filePath);
        axios_1.default.post.mockImplementation(() => Promise.reject(new Error('No access granted')));
        const { context, code } = yield upload_run_1.runUploadCommand(filePath, {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toEqual('No access granted\n');
        expect(stdout).toMatch(new RegExp(`File:[\\s]+${resolvedFilePath}`));
        expect(stdout).toMatch(/Source:[\s]+snyk/);
        expect(stdout).toMatch(/Service:[\s]+my-service/);
        expect(stdout).toMatch(/Version:[\s]+1.234/);
        expect(stdout).toContain('Uploading dependencies...');
        expect(stdout).toContain('Failed upload dependencies: No access granted');
        expect(code).toBe(3);
    }));
    test('handles API 403 errors', () => __awaiter(void 0, void 0, void 0, function* () {
        ;
        axios_1.default.post.mockImplementation(() => Promise.reject({ message: 'Forbidden', isAxiosError: true, response: { status: 403 } }));
        const { context, code } = yield upload_run_1.runUploadCommand('./src/commands/dependencies/__tests__/fixtures/dependencies.json', {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toEqual('Forbidden\n');
        expect(stdout).toContain('Failed upload dependencies: Forbidden. Check DATADOG_API_KEY and DATADOG_APP_KEY environment variables.');
        expect(code).toBe(3);
    }));
    test('retries on error', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = './src/commands/dependencies/__tests__/fixtures/dependencies.json';
        let didReject = false;
        axios_1.default.post.mockImplementation(() => {
            if (!didReject) {
                didReject = true;
                return Promise.reject({ message: 'Internal Server Error', isAxiosError: true, response: { status: 500 } });
            }
            return Promise.resolve();
        });
        const { context, code } = yield upload_run_1.runUploadCommand(filePath, {
            apiKey: 'DD_API_KEY_EXAMPLE',
            appKey: 'DD_APP_KEY_EXAMPLE',
            releaseVersion: '1.234',
            service: 'my-service',
            source: 'snyk',
        });
        const stdout = context.stdout.toString();
        const stderr = context.stderr.toString();
        expect(stderr).toEqual('');
        expect(stdout).toContain('Uploading dependencies...');
        expect(stdout).toContain('[attempt 1] Retrying dependencies upload: Internal Server Error');
        expect(stdout).toMatch(/Dependencies uploaded in .* seconds\./);
        expect(code).toBe(0);
    }));
});
