"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const path_1 = __importDefault(require("path"));
const tiny_async_pool_1 = __importDefault(require("tiny-async-pool"));
const apikey_1 = require("../../helpers/apikey");
const errors_1 = require("../../helpers/errors");
const metrics_1 = require("../../helpers/metrics");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const renderer_1 = require("./renderer");
const utils_2 = require("./utils");
class UploadCommand extends clipanion_1.Command {
    constructor() {
        super(...arguments);
        this.config = {
            apiKey: process.env.DATADOG_API_KEY,
            datadogSite: process.env.DATADOG_SITE || 'datadoghq.com',
        };
        this.dryRun = false;
        this.maxConcurrency = 20;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            this.basePath = path_1.default.posix.normalize(this.basePath);
            const cliVersion = require('../../../package.json').version;
            const metricsLogger = metrics_1.getMetricsLogger({
                datadogSite: process.env.DATADOG_SITE,
                defaultTags: [`cli_version:${cliVersion}`],
                prefix: 'datadog.ci.dsyms.',
            });
            this.context.stdout.write(renderer_1.renderCommandInfo(this.basePath, this.maxConcurrency, this.dryRun));
            const initialTime = Date.now();
            let searchPath = this.basePath;
            if (yield utils_2.isZipFile(this.basePath)) {
                searchPath = yield utils_2.unzipToTmpDir(this.basePath);
            }
            const apiKeyValidator = apikey_1.newApiKeyValidator({
                apiKey: this.config.apiKey,
                datadogSite: this.config.datadogSite,
                metricsLogger: metricsLogger.logger,
            });
            const payloads = yield utils_2.getMatchingDSYMFiles(searchPath, this.context);
            const validPayloads = payloads.filter((payload) => payload !== undefined);
            const requestBuilder = this.getRequestBuilder();
            const uploadDSYM = this.uploadDSYM(requestBuilder, metricsLogger, apiKeyValidator);
            try {
                const results = yield tiny_async_pool_1.default(this.maxConcurrency, validPayloads, uploadDSYM);
                const totalTime = (Date.now() - initialTime) / 1000;
                this.context.stdout.write(renderer_1.renderSuccessfulCommand(results, totalTime, this.dryRun));
                metricsLogger.logger.gauge('duration', totalTime);
                return 0;
            }
            catch (error) {
                if (error instanceof errors_1.InvalidConfigurationError) {
                    this.context.stdout.write(renderer_1.renderConfigurationError(error));
                    return 1;
                }
                // Otherwise unknown error, let's propagate the exception
                throw error;
            }
            finally {
                try {
                    yield metricsLogger.flush();
                }
                catch (err) {
                    this.context.stdout.write(`WARN: ${err}\n`);
                }
            }
        });
    }
    getRequestBuilder() {
        if (!this.config.apiKey) {
            throw new errors_1.InvalidConfigurationError(`Missing ${chalk_1.default.bold('DATADOG_API_KEY')} in your environment.`);
        }
        return utils_1.getRequestBuilder({
            apiKey: this.config.apiKey,
            baseUrl: utils_2.getBaseIntakeUrl(),
        });
    }
    uploadDSYM(requestBuilder, metricsLogger, apiKeyValidator) {
        return (dSYM) => __awaiter(this, void 0, void 0, function* () {
            const payload = yield dSYM.asMultipartPayload();
            if (this.dryRun) {
                this.context.stdout.write(`[DRYRUN] ${renderer_1.renderUpload(dSYM)}`);
                return upload_1.UploadStatus.Success;
            }
            return upload_1.upload(requestBuilder)(payload, {
                apiKeyValidator,
                onError: (e) => {
                    this.context.stdout.write(renderer_1.renderFailedUpload(dSYM, e.message));
                    metricsLogger.logger.increment('failed', 1);
                },
                onRetry: (e, attempts) => {
                    this.context.stdout.write(renderer_1.renderRetriedUpload(dSYM, e.message, attempts));
                    metricsLogger.logger.increment('retries', 1);
                },
                onUpload: () => {
                    this.context.stdout.write(renderer_1.renderUpload(dSYM));
                },
                retries: 5,
            });
        });
    }
}
exports.UploadCommand = UploadCommand;
UploadCommand.usage = clipanion_1.Command.Usage({
    description: 'Upload dSYM files to Datadog.',
    details: `
            This command will upload all dSYM files to Datadog in order to symbolicate crash reports received by Datadog.
            See README for details.
        `,
    examples: [
        ['Upload all dSYM files in Derived Data path', 'datadog-ci dsyms upload ~/Library/Developer/Xcode/DerivedData'],
        [
            'Upload all dSYM files in a zip file (this is usually the case if your app has Bitcode enabled)',
            'datadog-ci dsyms upload /path/to/folder/my_file.zip',
        ],
    ],
});
UploadCommand.addPath('dsyms', 'upload');
UploadCommand.addOption('basePath', clipanion_1.Command.String({ required: true }));
UploadCommand.addOption('maxConcurrency', clipanion_1.Command.String('--max-concurrency'));
UploadCommand.addOption('dryRun', clipanion_1.Command.Boolean('--dry-run'));
