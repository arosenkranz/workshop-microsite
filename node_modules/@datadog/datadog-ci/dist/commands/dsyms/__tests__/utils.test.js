"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: no-string-literal
const fs_1 = require("fs");
const interfaces_1 = require("../interfaces");
const utils_1 = require("../utils");
describe('isZipFile', () => {
    test('Zip file should return true', () => __awaiter(void 0, void 0, void 0, function* () {
        const zipFile = './src/commands/dsyms/__tests__/test files/test.zip';
        expect(yield utils_1.isZipFile(zipFile)).toBeTruthy();
    }));
    test('Arbitrary file should return false', () => __awaiter(void 0, void 0, void 0, function* () {
        const dsymFile = './src/commands/dsyms/__tests__/test files/test.dSYM';
        expect(yield utils_1.isZipFile(dsymFile)).toBeFalsy();
    }));
});
describe('getMatchingDSYMFiles', () => {
    test('Should find no valid dSYM file in Linux', () => __awaiter(void 0, void 0, void 0, function* () {
        const write = jest.fn();
        const mockContext = { stdout: { write } };
        const folder = './src/commands/dsyms/__tests__/test files/';
        const foundFiles = yield utils_1.getMatchingDSYMFiles(folder, mockContext);
        expect(foundFiles).toEqual([undefined]);
    }));
    test('Should find one valid dSYM file with mocking', () => __awaiter(void 0, void 0, void 0, function* () {
        require('../utils').dwarfdumpUUID = jest.fn().mockResolvedValue(['BD8CE358-D5F3-358B-86DC-CBCF2148097B']);
        const write = jest.fn();
        const mockContext = { stdout: { write } };
        const folder = './src/commands/dsyms/__tests__/test files/';
        const foundFiles = yield utils_1.getMatchingDSYMFiles(folder, mockContext);
        expect(foundFiles).toEqual([
            new interfaces_1.Dsym('./src/commands/dsyms/__tests__/test files/test.dSYM', ['BD8CE358-D5F3-358B-86DC-CBCF2148097B']),
        ]);
    }));
});
describe('zipToTmpDir', () => {
    test('Zip files to temporary directory', () => __awaiter(void 0, void 0, void 0, function* () {
        const dsymFile = './src/commands/dsyms/__tests__/test files/test.dSYM';
        const zippedFile = yield utils_1.zipToTmpDir(dsymFile, `${Date.now().toString()}.zip`);
        expect((yield fs_1.promises.stat(zippedFile)).size).toBeGreaterThan(0);
    }));
});
describe('unzipToTmpDir', () => {
    test('Unzip a file to temporary directory', () => __awaiter(void 0, void 0, void 0, function* () {
        const zipFile = './src/commands/dsyms/__tests__/test files/test.zip';
        const unzippedFolder = yield utils_1.unzipToTmpDir(zipFile);
        expect((yield fs_1.promises.stat(unzippedFolder)).size).toBeGreaterThan(0);
    }));
});
