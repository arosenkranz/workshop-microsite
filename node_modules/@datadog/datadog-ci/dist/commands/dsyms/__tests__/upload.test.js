"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: no-string-literal
// tslint:disable: no-var-requires
const advanced_1 = require("clipanion/lib/advanced");
const os_1 = require("os");
const upload_1 = require("../upload");
if (os_1.platform() !== 'darwin') {
    require('../utils').dwarfdumpUUID = jest.fn().mockResolvedValue(['BD8CE358-D5F3-358B-86DC-CBCF2148097B']);
}
describe('execute', () => {
    const makeCli = () => {
        const cli = new advanced_1.Cli();
        cli.register(upload_1.UploadCommand);
        return cli;
    };
    const createMockContext = () => {
        let data = '';
        return {
            stdout: {
                toString: () => data,
                write: (input) => {
                    data += input;
                },
            },
        };
    };
    const runCLI = (path) => __awaiter(void 0, void 0, void 0, function* () {
        const cli = makeCli();
        const context = createMockContext();
        process.env = { DATADOG_API_KEY: 'PLACEHOLDER' };
        const code = yield cli.run(['dsyms', 'upload', path, '--dry-run'], context);
        return { context, code };
    });
    test('should succeed with folder input', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield runCLI('./src/commands/dsyms/__tests__/test files/');
        const outputString = context.stdout.toString();
        const output = outputString.split(os_1.EOL);
        expect(outputString).not.toContain('Error');
        expect(code).toBe(0);
        expect(output[1]).toContain('Starting upload with concurrency 20. ');
        expect(output[2]).toContain('Will look for dSYMs in src/commands/dsyms/__tests__/test files/');
        expect(output[3]).toContain('Uploading dSYM with BD8CE358-D5F3-358B-86DC-CBCF2148097B from src/commands/dsyms/__tests__/test files/test.dSYM');
        expect(output[6]).toContain('Handled 1 dSYM with success in');
    }));
    test('should succeed with zip file input', () => __awaiter(void 0, void 0, void 0, function* () {
        const { context, code } = yield runCLI('./src/commands/dsyms/__tests__/test files/test.zip');
        const outputString = context.stdout.toString();
        const output = outputString.split(os_1.EOL);
        expect(outputString).not.toContain('Error');
        expect(code).toBe(0);
        expect(output[1]).toContain('Starting upload with concurrency 20. ');
        expect(output[2]).toContain('Will look for dSYMs in src/commands/dsyms/__tests__/test files/test.zip');
        expect(output[3]).toContain('Uploading dSYM with BD8CE358-D5F3-358B-86DC-CBCF2148097B from /');
        expect(output[6]).toContain('Handled 1 dSYM with success in');
    }));
});
