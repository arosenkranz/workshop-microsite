"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluralize = exports.getBaseIntakeUrl = exports.unzipToTmpDir = exports.zipToTmpDir = exports.dwarfdumpUUID = exports.getMatchingDSYMFiles = exports.isZipFile = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const interfaces_1 = require("./interfaces");
const utils_1 = require("../../helpers/utils");
const renderer_1 = require("./renderer");
const UUID_REGEX = '[0-9A-F]{8}-([0-9A-F]{4}-){3}[0-9A-F]{12}';
const globAsync = util_1.promisify(glob_1.default);
const isZipFile = (filepath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const stats = yield fs_1.promises.stat(filepath);
        return stats.size !== 0 && path_1.default.extname(filepath) === '.zip';
    }
    catch (error) {
        // Log to console "file exists yet empty" ?
        return false;
    }
});
exports.isZipFile = isZipFile;
const getMatchingDSYMFiles = (absoluteFolderPath, context) => __awaiter(void 0, void 0, void 0, function* () {
    const dSYMFiles = yield globAsync(utils_1.buildPath(absoluteFolderPath, '**/*.dSYM'), {});
    const allDsyms = dSYMFiles.map((dSYMPath) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const uuids = yield exports.dwarfdumpUUID(dSYMPath);
            return new interfaces_1.Dsym(dSYMPath, uuids);
        }
        catch (_a) {
            context.stdout.write(renderer_1.renderInvalidDsymWarning(dSYMPath));
            return undefined;
        }
    }));
    return Promise.all(allDsyms);
});
exports.getMatchingDSYMFiles = getMatchingDSYMFiles;
const dwarfdumpUUID = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    const output = yield execute(`dwarfdump --uuid '${filePath}'`);
    const uuids = [];
    output.stdout.split('\n').forEach((line) => {
        const regexMatches = line.match(UUID_REGEX);
        if (regexMatches && regexMatches.length > 0) {
            uuids.push(regexMatches[0]);
        }
    });
    return uuids;
});
exports.dwarfdumpUUID = dwarfdumpUUID;
const tmpFolder = utils_1.buildPath(os_1.tmpdir(), 'datadog-ci', 'dsyms');
const zipToTmpDir = (sourcePath, targetFilename) => __awaiter(void 0, void 0, void 0, function* () {
    yield fs_1.promises.mkdir(tmpFolder, { recursive: true });
    const targetPath = utils_1.buildPath(tmpFolder, targetFilename);
    const sourceDir = path_1.default.dirname(sourcePath);
    const sourceFile = path_1.default.basename(sourcePath);
    // `zip -r foo.zip f1/f2/f3/foo.dSYM`
    // this keeps f1/f2/f3 folders in foo.zip, we don't want this
    // `cwd: sourceDir` is passed to avoid that
    yield execute(`zip -r '${targetPath}' '${sourceFile}'`, sourceDir);
    return targetPath;
});
exports.zipToTmpDir = zipToTmpDir;
const unzipToTmpDir = (sourcePath) => __awaiter(void 0, void 0, void 0, function* () {
    const targetPath = utils_1.buildPath(tmpFolder, path_1.default.basename(sourcePath, '.zip'), Date.now().toString());
    const dirPath = path_1.default.dirname(targetPath);
    yield fs_1.promises.mkdir(dirPath, { recursive: true });
    yield execute(`unzip -o '${sourcePath}' -d '${targetPath}'`);
    return targetPath;
});
exports.unzipToTmpDir = unzipToTmpDir;
const execProc = util_1.promisify(child_process_1.exec);
const execute = (cmd, cwd) => execProc(cmd, {
    cwd,
    maxBuffer: 5 * 1024 * 5000,
});
const getBaseIntakeUrl = () => {
    if (process.env.DATADOG_DSYM_INTAKE_URL) {
        return process.env.DATADOG_DSYM_INTAKE_URL;
    }
    else if (process.env.DATADOG_SITE) {
        return 'https://sourcemap-intake.' + process.env.DATADOG_SITE;
    }
    return 'https://sourcemap-intake.datadoghq.com';
};
exports.getBaseIntakeUrl = getBaseIntakeUrl;
const pluralize = (nb, singular, plural) => {
    if (nb >= 2) {
        return `${nb} ${plural}`;
    }
    return `${nb} ${singular}`;
};
exports.pluralize = pluralize;
