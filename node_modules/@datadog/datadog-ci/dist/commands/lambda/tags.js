"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasVersionTag = exports.calculateTagUpdateRequest = exports.applyTagConfig = void 0;
const path_1 = __importDefault(require("path"));
const constants_1 = require("./constants");
// tslint:disable-next-line
const { version } = require(path_1.default.join(__dirname, '../../../package.json'));
const applyTagConfig = (lambda, configuration) => __awaiter(void 0, void 0, void 0, function* () {
    const { tagResourceRequest } = configuration;
    if (tagResourceRequest !== undefined) {
        yield lambda.tagResource(tagResourceRequest).promise();
    }
});
exports.applyTagConfig = applyTagConfig;
const calculateTagUpdateRequest = (lambda, functionARN) => __awaiter(void 0, void 0, void 0, function* () {
    const config = {};
    const versionTagPresent = yield exports.hasVersionTag(lambda, functionARN);
    if (!versionTagPresent) {
        config.tagResourceRequest = {
            Resource: functionARN,
            Tags: {
                [constants_1.TAG_VERSION_NAME]: `v${version}`,
            },
        };
        return config;
    }
    return;
});
exports.calculateTagUpdateRequest = calculateTagUpdateRequest;
const hasVersionTag = (lambda, functionARN) => __awaiter(void 0, void 0, void 0, function* () {
    const args = {
        Resource: functionARN,
    };
    const result = yield lambda.listTags(args).promise();
    const { Tags } = result;
    return Tags !== undefined && Tags[constants_1.TAG_VERSION_NAME] === `v${version}`;
});
exports.hasVersionTag = hasVersionTag;
