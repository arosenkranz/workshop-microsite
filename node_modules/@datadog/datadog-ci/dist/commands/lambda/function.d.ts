import { CloudWatchLogs, Lambda } from 'aws-sdk';
import { Runtime } from './constants';
import { LogGroupConfiguration } from './loggroup';
import { TagConfiguration } from './tags';
export interface FunctionConfiguration {
    functionARN: string;
    lambdaConfig: Lambda.FunctionConfiguration;
    lambdaLibraryLayerArn: string;
    logGroupConfiguration?: LogGroupConfiguration;
    tagConfiguration?: TagConfiguration;
    updateRequest?: Lambda.UpdateFunctionConfigurationRequest;
}
interface InstrumentationTags {
    environment?: string;
    extraTags?: string;
    service?: string;
    version?: string;
}
export interface InstrumentationSettings extends InstrumentationTags {
    extensionVersion?: number;
    flushMetricsToLogs: boolean;
    forwarderARN?: string;
    layerAWSAccount?: string;
    layerVersion?: number;
    logLevel?: string;
    mergeXrayTraces: boolean;
    tracingEnabled: boolean;
}
export declare const getLambdaConfigs: (lambda: Lambda, cloudWatch: CloudWatchLogs, region: string, functionARNs: string[], settings: InstrumentationSettings) => Promise<FunctionConfiguration[]>;
export declare const getLambdaConfigsFromRegEx: (lambda: Lambda, cloudWatch: CloudWatchLogs, region: string, pattern: string, settings: InstrumentationSettings) => Promise<FunctionConfiguration[]>;
export declare const updateLambdaConfigs: (lambda: Lambda, cloudWatch: CloudWatchLogs, configurations: FunctionConfiguration[]) => Promise<void>;
export declare const getFunctionConfiguration: (lambda: Lambda, cloudWatch: CloudWatchLogs, config: Lambda.FunctionConfiguration, region: string, settings: InstrumentationSettings) => Promise<{
    functionARN: string;
    lambdaConfig: Lambda.FunctionConfiguration;
    lambdaLibraryLayerArn: string;
    logGroupConfiguration: LogGroupConfiguration | undefined;
    tagConfiguration: TagConfiguration | undefined;
    updateRequest: Lambda.UpdateFunctionConfigurationRequest | undefined;
}>;
export declare const getLayerArn: (runtime: Runtime, settings: InstrumentationSettings, region: string) => string;
export declare const getExtensionArn: (settings: InstrumentationSettings, region: string) => string;
export declare const calculateUpdateRequest: (config: Lambda.FunctionConfiguration, settings: InstrumentationSettings, lambdaLibraryLayerArn: string, lambdaExtensionLayerArn: string, runtime: Runtime) => Lambda.UpdateFunctionConfigurationRequest | undefined;
export {};
