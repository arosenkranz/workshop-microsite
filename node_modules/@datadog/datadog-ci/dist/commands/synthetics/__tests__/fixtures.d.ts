/// <reference types="jest" />
/// <reference types="node" />
import * as http from 'http';
import { ProxyConfiguration } from '../../../helpers/utils';
import { ApiTestResult, BrowserTestResult, CommandConfig, MainReporter, MultiStep, MultiStepsTestResult, PollResult, Step, Test } from '../interfaces';
export declare const mockReporter: MainReporter;
export declare const ciConfig: CommandConfig;
export declare const getApiTest: (publicId: string) => Test;
export declare const getStep: () => Step;
export declare const getMultiStep: () => MultiStep;
export declare const getBrowserPollResult: () => PollResult;
export declare const getApiPollResult: () => PollResult;
export declare const getBrowserResult: (opts?: any) => BrowserTestResult;
export declare const getApiResult: () => ApiTestResult;
export declare const getMultiStepsResult: () => MultiStepsTestResult;
export declare const mockSearchResponse: {
    tests: {
        public_id: string;
    }[];
};
export declare const mockTestTriggerResponse: {
    locations: string[];
    results: {
        location: number;
        public_id: string;
        result: {
            dc_id: number;
            result: {
                device: string;
                passed: boolean;
                public_id: string;
            };
            result_id: string;
        };
        result_id: string;
    }[];
    triggered_check_ids: string[];
};
export declare const mockPollResultResponse: {
    results: {
        dc_id: number;
        result: {
            location: number;
            public_id: string;
            result: {
                dc_id: number;
                result: {
                    device: string;
                    passed: boolean;
                    public_id: string;
                };
                result_id: string;
            };
            result_id: string;
        };
        resultID: string;
    }[];
};
export declare const getSyntheticsProxy: () => {
    calls: {
        get: jest.Mock<any, any>;
        poll: jest.Mock<any, any>;
        presignedUrl: jest.Mock<any, any>;
        search: jest.Mock<any, any>;
        trigger: jest.Mock<any, any>;
        tunnel: jest.Mock<any, any>;
    };
    close: () => Promise<[unknown, unknown]>;
    config: ProxyConfiguration;
    server: http.Server;
};
