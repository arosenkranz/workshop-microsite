"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tags_1 = require("../tags");
const user_provided_git_1 = require("../user-provided-git");
describe('getUserGitMetadata', () => {
    it('reads user defined git metadata successfully', () => {
        process.env.DD_GIT_COMMIT_SHA = 'DD_GIT_COMMIT_SHA';
        process.env.DD_GIT_REPOSITORY_URL = 'DD_GIT_REPOSITORY_URL';
        process.env.DD_GIT_BRANCH = 'DD_GIT_BRANCH';
        process.env.DD_GIT_TAG = 'DD_GIT_TAG';
        process.env.DD_GIT_COMMIT_MESSAGE = 'DD_GIT_COMMIT_MESSAGE';
        process.env.DD_GIT_COMMIT_AUTHOR_NAME = 'DD_GIT_COMMIT_AUTHOR_NAME';
        process.env.DD_GIT_COMMIT_AUTHOR_EMAIL = 'DD_GIT_COMMIT_AUTHOR_EMAIL';
        process.env.DD_GIT_COMMIT_AUTHOR_DATE = 'DD_GIT_COMMIT_AUTHOR_DATE';
        process.env.DD_GIT_COMMIT_COMMITTER_NAME = 'DD_GIT_COMMIT_COMMITTER_NAME';
        process.env.DD_GIT_COMMIT_COMMITTER_EMAIL = 'DD_GIT_COMMIT_COMMITTER_EMAIL';
        process.env.DD_GIT_COMMIT_COMMITTER_DATE = 'DD_GIT_COMMIT_COMMITTER_DATE';
        const result = user_provided_git_1.getUserGitMetadata();
        expect(result).toEqual({
            [tags_1.GIT_REPOSITORY_URL]: 'DD_GIT_REPOSITORY_URL',
            [tags_1.GIT_BRANCH]: 'DD_GIT_BRANCH',
            [tags_1.GIT_SHA]: 'DD_GIT_COMMIT_SHA',
            [tags_1.GIT_TAG]: 'DD_GIT_TAG',
            [tags_1.GIT_COMMIT_MESSAGE]: 'DD_GIT_COMMIT_MESSAGE',
            [tags_1.GIT_COMMIT_COMMITTER_DATE]: 'DD_GIT_COMMIT_COMMITTER_DATE',
            [tags_1.GIT_COMMIT_COMMITTER_EMAIL]: 'DD_GIT_COMMIT_COMMITTER_EMAIL',
            [tags_1.GIT_COMMIT_COMMITTER_NAME]: 'DD_GIT_COMMIT_COMMITTER_NAME',
            [tags_1.GIT_COMMIT_AUTHOR_DATE]: 'DD_GIT_COMMIT_AUTHOR_DATE',
            [tags_1.GIT_COMMIT_AUTHOR_EMAIL]: 'DD_GIT_COMMIT_AUTHOR_EMAIL',
            [tags_1.GIT_COMMIT_AUTHOR_NAME]: 'DD_GIT_COMMIT_AUTHOR_NAME',
        });
    });
    it('does not include empty values', () => {
        delete process.env.DD_GIT_COMMIT_SHA;
        const result = user_provided_git_1.getUserGitMetadata();
        expect(result).toEqual({
            [tags_1.GIT_REPOSITORY_URL]: 'DD_GIT_REPOSITORY_URL',
            [tags_1.GIT_BRANCH]: 'DD_GIT_BRANCH',
            [tags_1.GIT_TAG]: 'DD_GIT_TAG',
            [tags_1.GIT_COMMIT_MESSAGE]: 'DD_GIT_COMMIT_MESSAGE',
            [tags_1.GIT_COMMIT_COMMITTER_DATE]: 'DD_GIT_COMMIT_COMMITTER_DATE',
            [tags_1.GIT_COMMIT_COMMITTER_EMAIL]: 'DD_GIT_COMMIT_COMMITTER_EMAIL',
            [tags_1.GIT_COMMIT_COMMITTER_NAME]: 'DD_GIT_COMMIT_COMMITTER_NAME',
            [tags_1.GIT_COMMIT_AUTHOR_DATE]: 'DD_GIT_COMMIT_AUTHOR_DATE',
            [tags_1.GIT_COMMIT_AUTHOR_EMAIL]: 'DD_GIT_COMMIT_AUTHOR_EMAIL',
            [tags_1.GIT_COMMIT_AUTHOR_NAME]: 'DD_GIT_COMMIT_AUTHOR_NAME',
        });
    });
    it('returns an empty object if no user git is defined', () => {
        delete process.env.DD_GIT_REPOSITORY_URL;
        delete process.env.DD_GIT_BRANCH;
        delete process.env.DD_GIT_TAG;
        delete process.env.DD_GIT_COMMIT_MESSAGE;
        delete process.env.DD_GIT_COMMIT_AUTHOR_NAME;
        delete process.env.DD_GIT_COMMIT_AUTHOR_EMAIL;
        delete process.env.DD_GIT_COMMIT_AUTHOR_DATE;
        delete process.env.DD_GIT_COMMIT_COMMITTER_NAME;
        delete process.env.DD_GIT_COMMIT_COMMITTER_EMAIL;
        delete process.env.DD_GIT_COMMIT_COMMITTER_DATE;
        const result = user_provided_git_1.getUserGitMetadata();
        expect(result).toEqual({});
    });
});
